x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: airflow/Dockerfile
  environment:
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    AIRFLOW__WEBSERVER__SECRET_KEY: '1P9EDytz9E6Z3MXQpRKLIS0bgDuOEl9s5DSK30lkNqQ'
    AIRFLOW__LOGGING__REMOTE_LOGGING: "False"
    AIRFLOW__SCHEDULER__SCHEDULER_ZOMBIE_TASK_THRESHOLD: 300
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./common:/opt/airflow/common
    - ./scraper:/opt/airflow/scraper
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    - redis
    - postgres

services:
  airflow-init:
    <<: *airflow-common
    entrypoint: >
      bash -c "airflow db migrate && \
               airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com"
    restart: on-failure

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    env_file: ./airflow/.env

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    env_file: ./airflow/.env

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    env_file: ./airflow/.env
    depends_on:
      - airflow-init

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    env_file: ./airflow/.env

  scraper-service:
    build:
      context: .
      dockerfile: scraper/Dockerfile
    volumes:
      - ./common:/app/common
    env_file: ./scraper/.env
    depends_on:
      - redis
      - app-db

  scraper-worker:
    build:
      context: .
      dockerfile: scraper_worker/Dockerfile
    volumes:
      - ./common:/app/common
    env_file: ./scraper_worker/.env
    command: celery -A tasks worker --loglevel=info --concurrency=1 --pool=threads --queues=scraper_queue
    depends_on:
      - redis
      - app-db

  embedding-worker:
    build:
      context: .
      dockerfile: embedding_worker/Dockerfile
    volumes:
      - ./common:/app/common
      - ./embedding_worker/sentence_transformer_model:/app/sentence_transformer_model
      - ./chroma_db:/app/chroma_db
    env_file: ./embedding_worker/.env
    command: celery -A tasks worker --loglevel=info --concurrency=4 --pool=threads --queues=embedding_queue
    depends_on:
      - redis
      - app-db

  query-api:
    build:
      context: .
      dockerfile: query_api/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./query_api:/app/query_api
      - ./rag_service:/app/rag_service
      - ./embedding_worker/sentence_transformer_model:/app/sentence_transformer_model
    command: uvicorn query_api.app.main:app --reload --host 0.0.0.0 --port 8000
    depends_on:
      - app-db
    env_file:
      - ./query_api/.env

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    volumes:
    - ./frontend:/app
    - /app/node_modules
    command: npm run dev
    ports:
      - "5173:5173"
    depends_on:
      - query-api
    env_file:
      - ./frontend/.env

